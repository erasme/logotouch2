#:kivy 1.4.1
#:import _ logotouch.translations._
#:import CorpusSelector logotouch.CorpusSelector
#:import LastSessions logotouch.LastSessions
#:import baseenc logotouch.baseenc.baseenc
#
# Colors
#:import h kivy.utils.get_color_from_hex
#:import randint random.randint
#:set color_adverbe '#ff9933'
#:set color_adverbe_selected '#ffe9d3'
#:set color_adverbe_antonym '#ffd8b1'
#:set color_word '#0099cc'
#:set color_word_selected '#d3f4ff'
#:set color_word_antonym '#84e0ff'
#:set color_verbe '#990066'
#:set color_verbe_selected '#fcdcf2'
#:set color_verbe_antonym '#fcb9e7'

<Label>:
	font_name: 'data/VagRounded.ttf'

<AppButton>:
	background_normal: ''
	background_down: ''
	color: h('#caf589ff')
	font_name: 'data/VagRounded.ttf'
	font_size: '24sp'
	background_color: h('#62990f') if self.state == 'normal' else h('#92c93f')

<BackButton>:
	text: '9'
	font_name: 'data/pulsarjs.ttf'
	background_color: (0, 0, 0, 0)
	color: h('#a0a0a0') if self.state == 'normal' else h('#92c93f')
	font_size: '50sp'
	size_hint: None, None
	size: '64sp', '64sp'
	pos_hint: {'top': 1, 'x': 0}

<ScreenManager>:
	canvas.before:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			source: 'data/background.png'
			size: self.size


<WelcomeScreen>:
	AnchorLayout:
		GridLayout:
			size_hint: .8, .8
			cols: 1

			Label:
				#text:
				#    ''.join(['[color=#{0}]{1}[/color]'.format(
				#    ['ff9933', '0099cc', '990066'][
				#    randint(0, 2)], x) for x in 'Logotouch'])
				text: _('Logotouch')
				color: (1, .6, .3, 1)
				font_size: '64sp'
				markup: True

			BoxLayout:
				size_hint_y: None
				spacing: '10dp'
				height: '64sp'
				AppButton:
					text: _('Create a session')
					on_release: app.create_session()
				AppButton:
					text: _('Join a session')
					on_release: app.join_session()

<CreateSessionScreen>:
	BackButton:
		on_release: app.do_back()

	GridLayout:
		size_hint_x: 0.8
		pos_hint: {'center_x': 0.5}
		padding: '20dp'
		spacing: '20dp'
		cols: 1
		Label:
			text: _('Create a session')
			color: (1, .6, .3, 1)
			font_size: '64sp'
			size_hint_y: None
			height: '100sp'

		AppButton:
			text: _('Create a new corpus')
			size_hint_y: None
			height: '64sp'
			on_release: app.create_session_new_corpus()

		CorpusSelector

<JoinSessionScreen>:
	textinput: ti
	BackButton:
		on_release: app.do_back()

	GridLayout:
		size_hint_x: 0.8
		pos_hint: {'center_x': 0.5}
		padding: '20dp'
		spacing: '20dp'
		cols: 1
		Label:
			text: _('Join a session')
			color: (1, .6, .3, 1)
			font_size: '64sp'
			size_hint_y: None
			height: '100sp'

		GridLayout:
			cols: 3
			size_hint_y: None
			height: '64sp'
			spacing: '10dp'

			Label:
				text: _('Code : ')
				color: h('a0a0a0')
				font_size: '32sp'
				size_hint_x: None
				width: self.texture_size[0] + dp(20)

			TextInput:
				id: ti
				font_size: '32sp'
				padding: ('8sp', '10sp')
				font_name: 'data/VagRounded.ttf'
				color: h('a0a0a0')
				background_normal: ''
				background_active: ''
				background_color: h('cccccccc') if self.focus else h('dddddddd')
				multiline: False
				on_text_validate: btn.dispatch('on_release')

			AppButton:
				id: btn
				text: 'X'
				font_name: 'data/pulsarjs.ttf'
				font_size: '32sp'
				size_hint_x: None
				width: self.height
				color: h('#caf589ff') if len(ti.text) > 2 else h('#a0a0a000')
				background_color: (h('#62990f') if self.state == 'normal' else h('#92c93f')) if len(ti.text) > 2 else h('00000000')
				on_release: app.join_session_from_enc(ti.text) if len(ti.text) > 2 else None

		Label:
			text: root.error
			color: h('a06060')
			font_size: '24sp'
			size_hint_y: None
			height: '64sp'

		LastSessions:
			cols: 1


[LastSessionItemButton@BoxLayout]:
	size_hint_y: None
	height: '100dp'
	padding: '20dp'
	canvas:
		Color:
			rgba: .8, .8, .8, .5
		Rectangle:
			size: self.size
			pos: self.pos

	BoxLayout:
		orientation: 'vertical'

		Label:
			text: baseenc(ctx.rec.get('sessid'))
			color: (.1, .1, .1, 1)
			font_size: '20sp'
		Label:
			text:
				_('Corpus: {0} - {1} words').format(
				ctx.rec.get('corpus').get('author') or '-',
				ctx.rec.get('corpus').get('count'))
			color: (.1, .1, .1, .8)
			font_size: '14sp'

	AppButton:
		text: _('Select')
		size_hint_x: None
		width: '130sp'
		on_release: app.join_session_from_enc(baseenc(ctx.rec.get('sessid')))


[CorpusItemButton@BoxLayout]:
	size_hint_y: None
	height: '100dp'
	padding: '20dp'
	canvas:
		Color:
			rgba: .8, .8, .8, .5
		Rectangle:
			size: self.size
			pos: self.pos

	BoxLayout:
		orientation: 'vertical'

		Label:
			text: ctx.rec.get('title')
			color: (.1, .1, .1, 1)
			font_size: '20sp'
		Label:
			text:
				_('Made by {0} - {1} words').format(
				ctx.rec.get('author') or '-',
				ctx.rec.get('count'))
			color: (.1, .1, .1, .8)
			font_size: '14sp'

	AppButton:
		text: _('Select')
		size_hint_x: None
		width: '130sp'
		on_release: app.create_session_with_corpus(ctx.rec.get('id'))


<CorpusSelector>:
	cols: 1

<DownloadScreen>:
	GridLayout:
		size_hint_x: 0.8
		pos_hint: {'center_x': 0.5}
		padding: '20dp'
		cols: 1
		Label:
			text: root.title
			color: (1, .6, .3, 1)
			font_size: '64sp'
			size_hint_y: None
			height: '100sp'


		Label:
			text: root.action
			color: (1, .6, .3, 1)
			font_size: '48sp'
			size_hint_y: None
			height: '100sp'

		ProgressBar:
			value: root.progression


<GameScreen>:
	word_container: word_container
	sentence_container: sentence_container
	root_layout: root_layout

	FloatLayout:
		id: root_layout

		GridLayout:
			cols: 1
			BoxLayout:
				canvas:
					Color:
						rgba: .8, .8, .8, .8
					Rectangle:
						pos: self.pos
						size: self.size

				size_hint_y: None
				height: '50dp'
				padding: '10dp'
				spacing: '10dp'

				#Button:
				#	text: '9'
				#	font_name: 'data/pulsarjs.ttf'
				#	background_color: (0, 0, 0, 0)
				#	color: h('#a0a0a0') if self.state == 'normal' else h('#92c93f')
				#	font_size: '32sp'
				#	size_hint_x: None
				#	width: self.height
				#	on_release: app.help_gesture()

				BackButton:
					on_release: app.do_back()
					pos_hint: {}
					size_hint: None, 1
					width: self.height
					font_size: '36sp'

				Label:
					text: _('Code: {0}').format(root.sessid_enc)
					color: h('a0a0a0')
					font_size: '32sp'
					size_hint_x: None
					width: self.texture_size[0]
				Widget

				AppButton:
					text: _('Sentences: {}').format(root.sentences_count)
					on_release: root.open_sentences_browser()

				Widget

				TypeButton:
					wordtype: 0
					state: 'down'
					on_press: root.toggle_type(self.wordtype)
				TypeButton:
					wordtype: 1
					state: 'down'
					on_press: root.toggle_type(self.wordtype)
				TypeButton:
					wordtype: 2
					state: 'down'
					on_press: root.toggle_type(self.wordtype)

			ScrollView:
				id: sc
				do_scroll_y: False
				do_scroll_x: word_container.minimum_width > self.width
				RelativeLayout:
					size_hint_x: None
					width: word_container.width
					GameLayout:
						id: word_container
						size_hint_x: None
						width: max(sc.width, self.minimum_width)

			GridLayout:
				cols: 2
				size_hint_y: None
				height: '90dp'

				canvas:
					Color:
						rgba: .8, .8, .8, .8
					Rectangle:
						pos: self.pos
						size: self.size

				SentenceLayout:
					id: sentence_container
					is_valid: len(self.children) >= 2

				AppButton:
					text: 'T'
					font_name: 'data/pulsarjs.ttf'
					font_size: '32sp'
					size_hint_x: None
					width: self.height
					color: h('#caf589ff') if sentence_container.is_valid else h('#a0a0a000')
					background_color: (h('#62990f') if self.state == 'normal' else h('#92c93f')) if sentence_container.is_valid else h('00000000')
					on_release: sentence_container.submit()

<Word>:
	size_hint: None, None
	size: self.texture_size[0] + self.padding, self.font_size + dp(20)
	background_color: (0, 0, 0, 0)
	color: [h(color_verbe), h(color_word), h(color_adverbe), 1][root.wordtype]
	background_normal: ''
	background_down: ''
	font_size: sp(44) - self.fontzoom
<bleh>:
	canvas.before:
		Color:
			rgba: ([h(color_verbe_antonym), h(color_word_antonym), h(color_adverbe_antonym)][root.wordtype][:3] if self.antonym else [1, 1, 1]) + [.8 if self.state == 'down' else 1]
		Mesh:
			vertices: [self.x, self.y - self.direction, 0, 0, self.right, self.y + self.direction, 0, 0, self.right, self.top - self.direction, 0, 0, self.x, self.top + self.direction, 0, 0]
			indices: range(4)
			mode: 'triangle_fan'
		Color:
			rgba: [h(color_verbe), h(color_word), h(color_adverbe), 1][root.wordtype]
		Line:
			points: [self.x, self.y - self.direction, self.right, self.y + self.direction, self.right, self.top - self.direction, self.x, self.top + self.direction]
			close: True
			width: 1.1



<TypeButton>:
	background_color:[h(color_verbe), h(color_word), h(color_adverbe)][root.wordtype][:3] + [1 if self.state == 'down' else .5]
	border: 0, 0, 0, 0
	background_normal: ''
	background_down: ''
	size_hint_x: None
	width: self.height

<GestureWordSelector>:
	container: container
	background: 'data/trans.png'
	background_color: 1, 1, 1, 0

	FloatLayout:
		id: fl

		FloatLayout:
			y: '90dp'
			height: fl.height - dp(90)
			size_hint_y: None

			canvas:
				Color:
					rgba: 1, 1, 1, root._anim_alpha
				Rectangle:
					pos: self.pos
					size: self.size
					source: 'data/background.png'

			GestureContainerSelector:
				pos_hint: {'x': 0, 'y': 0}
				id: container
				screen: root.screen
				view: root

		Button:
			text: 'O'
			font_name: 'data/pulsarjs.ttf'
			background_color: (0, 0, 0, 0)
			color: h('#a0a0a0') if self.state == 'normal' else h('#92c93f')
			font_size: '50sp'
			size_hint: None, None
			size: '64sp', '64sp'
			pos_hint: {'top': 1, 'right': 1}
			on_release: app.help_gesture()

		BackButton:
			on_release: root.dismiss()

[HelpLabel@Label]:
	text: ctx.text
	color: (1, .6, .3, 1)
	font_size: '24sp'
	text_size: self.width - dp(20), None

<HelpGesturePopup>:
	background: 'data/background.png'
	GridLayout:
		spacing: '10sp'
		padding: '50sp'
		cols: 4
		Image:
			source: 'atlas://data/gestures/gesture-person'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-person')
		Image:
			source: 'atlas://data/gestures/gesture-rotate'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-rotate')
		Image:
			source: 'atlas://data/gestures/gesture-time'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-time')
		Image:
			source: 'atlas://data/gestures/gesture-scale'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-scale')
		Image:
			source: 'atlas://data/gestures/gesture-toggleperson'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-toggleperson')
		Image:
			source: 'atlas://data/gestures/gesture-shake'
			size_hint_x: 0.3
		HelpLabel:
			text: _('help-gesture-shake')

	Button:
		background: ''
		background_color: (0, 0, 0, 0)
		on_release: root.dismiss()

<ErrorPopup>:
	canvas:
		Color:
			rgba: 0, 0, 0, 0.8
		Rectangle:
			source: 'data/background.png'
			size: self.size

	Label:
		text: root.message

<SentencesBrowserPopup>:
	canvas:
		Color:
			rgb: 1, 1, 1
		Rectangle:
			source: 'data/background.png'
			size: self.size

	GridLayout:
		cols: 1

		BackButton:
			size_hint: None, None
			size: '64sp', '64sp'
			on_release: root.dismiss()

		ScrollView:
			id: sv
			do_scroll_x: False
			Scatter:
				do_rotation: False
				do_translation: False
				do_scale: False
				size: sb.size
				size_hint: None, None
				SentencesBrowser:
					id: sb
					cols: 1
					height: self.minimum_height
					width: sv.width

